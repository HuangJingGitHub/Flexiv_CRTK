// Generated by gencpp from file flexiv_crtk/RobotStates.msg
// DO NOT EDIT!


#ifndef FLEXIV_CRTK_MESSAGE_ROBOTSTATES_H
#define FLEXIV_CRTK_MESSAGE_ROBOTSTATES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Wrench.h>

namespace flexiv_crtk
{
template <class ContainerAllocator>
struct RobotStates_
{
  typedef RobotStates_<ContainerAllocator> Type;

  RobotStates_()
    : measured_jp()
    , measrued_cp()
    , goal_cp()
    , measured_cv()
    , measured_cf()  {
      measured_jp.assign(0.0);
  }
  RobotStates_(const ContainerAllocator& _alloc)
    : measured_jp()
    , measrued_cp(_alloc)
    , goal_cp(_alloc)
    , measured_cv(_alloc)
    , measured_cf(_alloc)  {
  (void)_alloc;
      measured_jp.assign(0.0);
  }



   typedef boost::array<double, 7>  _measured_jp_type;
  _measured_jp_type measured_jp;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _measrued_cp_type;
  _measrued_cp_type measrued_cp;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _goal_cp_type;
  _goal_cp_type goal_cp;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _measured_cv_type;
  _measured_cv_type measured_cv;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _measured_cf_type;
  _measured_cf_type measured_cf;





  typedef boost::shared_ptr< ::flexiv_crtk::RobotStates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flexiv_crtk::RobotStates_<ContainerAllocator> const> ConstPtr;

}; // struct RobotStates_

typedef ::flexiv_crtk::RobotStates_<std::allocator<void> > RobotStates;

typedef boost::shared_ptr< ::flexiv_crtk::RobotStates > RobotStatesPtr;
typedef boost::shared_ptr< ::flexiv_crtk::RobotStates const> RobotStatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flexiv_crtk::RobotStates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flexiv_crtk::RobotStates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flexiv_crtk::RobotStates_<ContainerAllocator1> & lhs, const ::flexiv_crtk::RobotStates_<ContainerAllocator2> & rhs)
{
  return lhs.measured_jp == rhs.measured_jp &&
    lhs.measrued_cp == rhs.measrued_cp &&
    lhs.goal_cp == rhs.goal_cp &&
    lhs.measured_cv == rhs.measured_cv &&
    lhs.measured_cf == rhs.measured_cf;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flexiv_crtk::RobotStates_<ContainerAllocator1> & lhs, const ::flexiv_crtk::RobotStates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flexiv_crtk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::flexiv_crtk::RobotStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flexiv_crtk::RobotStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexiv_crtk::RobotStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexiv_crtk::RobotStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexiv_crtk::RobotStates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexiv_crtk::RobotStates_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flexiv_crtk::RobotStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ca6fd6ae4c4a0b14dbb192201e94af1";
  }

  static const char* value(const ::flexiv_crtk::RobotStates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ca6fd6ae4c4a0b1ULL;
  static const uint64_t static_value2 = 0x4dbb192201e94af1ULL;
};

template<class ContainerAllocator>
struct DataType< ::flexiv_crtk::RobotStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flexiv_crtk/RobotStates";
  }

  static const char* value(const ::flexiv_crtk::RobotStates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flexiv_crtk::RobotStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[7] measured_jp\n"
"geometry_msgs/Pose measrued_cp\n"
"geometry_msgs/Pose goal_cp\n"
"geometry_msgs/Twist measured_cv\n"
"geometry_msgs/Wrench measured_cf\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
;
  }

  static const char* value(const ::flexiv_crtk::RobotStates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flexiv_crtk::RobotStates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.measured_jp);
      stream.next(m.measrued_cp);
      stream.next(m.goal_cp);
      stream.next(m.measured_cv);
      stream.next(m.measured_cf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotStates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flexiv_crtk::RobotStates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flexiv_crtk::RobotStates_<ContainerAllocator>& v)
  {
    s << indent << "measured_jp[]" << std::endl;
    for (size_t i = 0; i < v.measured_jp.size(); ++i)
    {
      s << indent << "  measured_jp[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.measured_jp[i]);
    }
    s << indent << "measrued_cp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.measrued_cp);
    s << indent << "goal_cp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_cp);
    s << indent << "measured_cv: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.measured_cv);
    s << indent << "measured_cf: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.measured_cf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLEXIV_CRTK_MESSAGE_ROBOTSTATES_H
